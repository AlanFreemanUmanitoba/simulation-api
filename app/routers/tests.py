from fastapi import APIRouter, status, Security, Depends
from app.authorization.auth import auth_handler
from app.database import get_session
from app.schemas import ServerMessage
from sqlalchemy.orm import Session
from ..models import get_current_user

router = APIRouter(prefix="/tests", tags=["Tests"])

@router.get("/public")
def public():
    """A public endpoint requiring no authentication.
    
    This is just a test function.
    """
    userMessage:str={"message":f"Public Data ","statusCode":status.HTTP_200_OK}
    return userMessage

@router.get("/private-api-key",response_model=ServerMessage)
def private(
    username: str = Depends(auth_handler.auth_wrapper),
    session: Session = Depends(get_session))->str:
    """A private endpoint that requires a valid API key.
    
    This is just a test function.

    The key can be in a custom header or appended to the URL as a query.
    
        Return an authentication error (generated by a fastAPI exception
        which bypasses the rest of the code) if the key is not valid.
    
        Return error message if the key is valid but the user cannot be 
        found (This is a data error and should not happen).

        Return status 200 message if the request was valid.
    """
    current_user=get_current_user(username,session)
    if current_user==None:
        return {"message":f"Error locating the user of the API key {username}","statusCode":status.HTTP_404_NOT_FOUND}
    else:
        return {"message":f"Protected Data for user {current_user.username} retrieved using api key {username}","statusCode":status.HTTP_200_OK}

@router.get('/unprotected')
def unprotected():
    """A private endpoint that requires no security.
    
    This is just a test function.
    """
    return { 'hello': 'world' }


@router.get('/protected')
def protected(username=Depends(auth_handler.auth_wrapper)):
    """A private endpoint that requires a bearer token.
    
    This is just a test function.

        Return an authentication error (generated by fastAPI) if the token 
        is not valid.
    """
    return { 'name': username }

