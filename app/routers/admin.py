"""Endpoints for the administrator

These provide a backdoor for admins to obtain
data from the server without logging in or
carry out admin actions such as resets.

To this end the endpoints employ api-key access.

The api-key is intended to be distributed manually.

"""
from typing import Annotated, List
from fastapi import APIRouter, Depends, FastAPI, HTTPException, Security, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from app.schemas import SimulationBase, UserBase, UserMessage, ServerMessage
from ..database import Base, engine, get_session
from ..authorization.auth import auth_handler, get_api_key
from ..models import Simulation, User
from ..config import ALGORITHM, SECRET_KEY

router = APIRouter(prefix="/admin", tags=["Admin"])

@router.get("/users",response_model=List[UserBase])
def get_users_for_admin(
    api_key: str = Security(get_api_key),
    session:Session =Depends(get_session)
)->List[User]:
    """Provide an admin with a list of users.
    
    Backdoor access to global data via an API key.
        
        A valid API key must be provided, either in a custom header or 
        appended to the URL as a query.
    
        Returns: authentication error (generated by fastAPI) if the key 
        is not valid.
    """
    user = session.query(User).all()
    return user

@router.get("/user/{username}",response_model=UserBase)
def get_user_for_admin(
    username:str,
    api_key: str = Security(get_api_key),
    session:Session =Depends(get_session)
)->User:
    """Provide an admin with a the details of the user called username.
    
    Backdoor access to global data via an API key.
        
        username: the name of the user.
        
        A valid API key must be provided, either in a custom header or 
        appended to the URL as a query.
    
        Returns: authentication error (generated by fastAPI) if the key 
        is not valid.

        Returns: None if the user does not exist.
    """
    user = session.query(User).where(User.username==username).first()
    return user

@router.get("/templates",response_model=List[SimulationBase])
def get_simulations(
    api_key: str = Security(get_api_key),
    session: Session = Depends (get_session)
    )->List[Simulation]:
    """Retrieve all templates. A user can clone a template to create an
    actual simulation.

    Backdoor access via an API key.
        
        A valid API key must be provided, either in a custom header or 
        appended to the URL as a query.
    
        Returns: authentication error (generated by fastAPI) if the key 
        is not valid.
    """
    simulations=session.query(Simulation).filter(Simulation.state=="TEMPLATE")
    return simulations

@router.get("/template/{id}",response_model=SimulationBase)
def get_simulation(
    id:str,
    api_key: str = Security(get_api_key),
    session: Session = Depends (get_session)
    )->Simulation:
    """Retrieve the template whose primary key is id. 
    
    A user can clone this template to create an actual simulation.

    Backdoor access via an API key.
        
        id: primary key of the Template.

        A valid API key must be provided, either in a custom header or 
        appended to the URL as a query.
    
        Returns: authentication error (generated by fastAPI) if the key 
        is not valid.

        Returns: None if there is no such template
    """
    simulations=session.query(Simulation).filter(Simulation.id==int(id)).first()
    return simulations

